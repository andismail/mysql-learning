分片目的:减少主库写负载 

分库分表的几种方式
	把一个实例中的多个数据库拆分到不同的实例
	把一个库中的表分离到不同结点不同的数据库中
	表的水平拆分,也就是说的分片处理

数据库分片前的准备
	1.对一个库中的相关表进行水平拆分到不同实例的数据库中，也就是说的分片处理，通常说的分库分表大多数情况下指的就是这个
	2.书上说如果没必要不建议进行分片，应首先考虑是否可以通过性能调优或更好的应用或数据为设计推迟分片，因为分片并不容易同时分片后数据库变得更不好维护
	3.如何选择分区键,以及分片后如何查询数据
		1.分区键直接决定其后的性能和数据库服务器的负载
		2.分区键要能尽量避免跨分片查询的发生，完全不跨也不可能因为一些统计查询
			如商品表就不适合按id分，因为有分页等，这会可能按商品类型分要好一些
		3.分区键要尽量使各个分片中的数据平均，如果按id分的话一致性哈希可能不错
		4.分片的表毕竟少数，不用分片的表如何存储
			1.每个分片中存储一份相同的数据:a)不大的表。b)字典表。c)可能会和分片后的表关联查询的表
				此时的问题是要保证数据的一致性
		5.使用额外的节点统一存储
			1.前面已经说了分表都是后期的事，所以这会的话之前写的联表查询都得重写
			2.好处是没有冗余的数据
	4.如何生成全局唯一ID
		1.使用auto_increment_increment和auto_increment_offset参数
		2.使用全局节点来生成id
		3.在Redis等缓存服务器中创建全局id

中间件
	OneProxyp
