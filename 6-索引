MySQL支持的索引类型:同一种索引在不同的存储引擎上可能实现不同
	1.为什么要使用索引
		1.索引大大减少了存储引擎需要扫描的数据量
		2.索引可以帮助我们排序以避免使用临时表
		3.索引可以把随机I/O变成顺序I/O
	1.索引不是越多越好
		1.索引会增加写操作的成本
		2.太多的索引会增加查询优化器的选择时间

B-tree:MySAM在叶子结点上是通过数据的物理位置来引用行的,而InnoDB是通过主键来引用索引的行
	0.结构
		1.MyISAM索引文件和数据文件是分离的,索引文件仅保存数据记录的地址
		2.InnoDB中表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶子节点data域保存了完整的数据记录
	1.说明
		1.B+树结构存储数据,每个叶子结点都包含指向下一个叶子结点的指针,所以方便叶子结点间的遍历
		2.能加快数据查询速度
		3.适合进行范围查找
	2.在什么情况可以用到B-tree:
		1.全值匹配查询		order_sn='932689'
		2.匹配最左前缀的查询	联合索引左前缀
		3.匹配列前缀查询	order_sn like '9326%'
		4.匹配范围值的查询	order_id>1 and order_id<10
		5.只访问索引的查询	覆盖索引
	3.B-tree索引的使用限制:
		1.查询的数据量是表中的大部分数据时,MySQL的查询优化器会认为全表扫描性能更好,所以就不会使用索引的方式查询
		2.对于联合索引,如果不是按照最左列查询,索引不能生效
		3.NOT IN 和 <> 操作无法使用索引
		4.对于联合索引A-B-C,如果对于B使用了范围查询,那么可以用到A-B但不能用到C
		5.区分度低的
		6.对索引列上使用函数
		7.使用双%

Hash索引:
	1.说明
		1.Hash索引是基于Hash表实现的,只有查询条件精确匹配Hash索引中的所有的列时,才能够使用Hash索引.也就是说其只能用到等值查询中,如果要用到
		  范围查询或模糊查询就不能用Hash索引
		2.对Hash索引中的所有列,存储引擎都会为每一行计算一个Hash码,Hash索引中存的是Hash码
	2.限制
		1.两次读取,先读Hash索引找到数据所在行的指针,然后再去找到那行
		2.无法用于排序
		3.范围查询或模糊查询就不能用Hash索引
		4.可能存在Hash冲突
		5.区分度低的

InnoDB:
	1.MyISAM索引文件和数据文件是分离的,索引文件仅保存数据记录的地址
	2.InnoDB中,表数据文件本身就是按B+Tree组织的一个索引结构,这棵树的叶子节点data域保存了完整的数据记录,这个索引的key是数据表的主键,
	  因此InnoDB表数据文件本身就是主索引,也就是主索引,也就是主索引,也就是主索引.
	3.InnoDB主索引,同时也是数据文件,同时其叶子结点包含了完整的数据记录,这种索引叫做聚集索引.
	  因为InnoDB数据文件按主键聚集,所以其必需要有主键,若没有会隐式生成
	4.所谓辅助索引,是批除主索引外的索引,InnoDB的所有辅助索引都引用主键作为data域
	5.聚集索引这种方式使得使用按主键查询十分高效(各人认为此时没有回表一说),
	  但辅助索引要检索两索引:先检索辅助索引找到主键,通过主键到检索主索引,也就是数据文件,中获得记录
	6.以上,所以不建议主键数据类型占用过大,
	  同时,因为InnoDB数据文件本身是一颗B+Tree,非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整,十分低效
	  而使用自增字段作为主键则是一个很好的选择

索引优化策略:
	1.索引列上不能使用表达式或函数
	2.前缀索引和索引列的选择
		前缀索引:只取一部分
		CREATE INDEX index_name ON table(col_name(n));
	3.索引的选择性(区分度):不重复的索引值和表的记录数的比值
	4.联合索引:
		5.0之前每一个查询只能使用一个索引
		如何选择联合索引顺序:
			经常被使用到的列优先
			区分度低的不适合放左边
			选择性高的适合放到左边
			宽度小的适合放左边(IO少)
	5.覆盖索引
		1.无法使用覆盖索引的情况
			并非所有存储引擎都支持覆盖索引
			查询中使用太多的列
			使用双%的like查询

使用索引扫描来优化排序:
	1.索引的顺序和Order By子句的顺序完全一致
	2.索引中所有列的方向(升序,降序)和order by子句完全一致
	3.Order by中字段全部在关联表中的第一张表

利用索引优化锁:
	1.索引可以减少锁定行数
	2.索引可以加快处理速度,同时也加快了锁的释放

索引的维护和优化:
	1.删除重复和冗余的索引:因为即使是重复的索引MySQL也会对
