MySQL复制功能:
	MySQL的复制功能是构建大规模高可用应用的基础
	因为MySQL事务的特性决定了它不能通过其简单的增加服务器解决负载,而MySQL复制功能为提供了分担读负载的办法
	复制功能可以对数据库进行水平扩展,为其增加一个或多个备库,这些备库可以用来分担主数据库的读负载
	复制功能也为高可用、灾难恢复、备份提供了更多的选择
	MySQL上的复制是基于主库上的二进制日志,在备库上重放这些二进制日志完成的,也就意味着在同一时间点可能存在数据不一致同时无法保证主库与备库间的延迟

MySQL复制解决了什么问题:
	1.实现在不同服务器上的数据分布
		利用二进制日志增量进行
		不需要太多的带宽
		但是使用基于行的复制在进行大批量的更改时会对带宽带来一定压力(所以大指修改应该分批进行)
	2.实现数据读取的负载均衡
		需要其它组件配合完成
		利用DNS轮询的方式把程序的读连接到不同的备份数据库
		使用LVS、haproxy这样的代理方式
		非共享架构,同样的数据分布在多台服务器上,所以增加了数据的安全性
		利用备库的备份来减少主库负载
		复制并不能代替备份
		方便进行数据高可用架构的部署,避免MySQL单点失败
	3.实现数据库高可用和故障切换
	4.实现数据库在线升级

日志:
	MySQL服务层日志:二进制日志、慢查日志、通用日志
	MySQL存储引擎层日志-Innodb:重做日志、回滚日志
	是否开启了日志:show master logs;
二进制日志:
	记录了所有对MySQL数据库的修改事件,包括增删改(查?)事件和对表结构的修改事件
	其中记录了的是所有已经执行成功了的,回滚了的或其它原因如语法错误等并未成功执行的事件是不会记录在其中的
二进制日志的格式:
	mysql> show variables like 'binlog_format';
	+---------------+-------+
	| Variable_name | Value |
	+---------------+-------+
	| binlog_format | ROW   |
	+---------------+-------+
	-- 5.7版本默认
	set session binlog_format='statement';-- 设置为段格式
	flush logs; -- 刷新log
	1.基于段的二进制格式 binlog_format=STATEMENT,5.7之前默认使用的格式
		优点:日志记录量相对小,节约磁盘及网络IO,直接记录执行的SQL语句
		缺点:由于其记录的是SQL语句,所以必须记录上下文信息,从而保证语句在从服务器上执行结果和在主服务器上相同
		     一些特定函数如UUID()、user()这样的非确定性函数是无法复制的,可能会造成主从服务器数据不一致
	2.基于行的日志格式 binlog_format=ROW ,ROW格式可以避免MySQL复制中出现的主从不一致问题,每修改一行就会有一条记录,例如修改了1000条数据STATEMENT
	只会记录修改的SQL语句,ROW则会记录这1000条修改了什么
		优点:a.获得更加安全的复制环境 b.只对于条数据修改比基于段的复制高效 c.ROW格式中详细的记录了对每一行数据的修改,所以当误操作修改了数据
			时同时又没有备份可以恢复,此时可以通过分析ROW格式的二进制日志来达到恢复数据的目的
		缺点:记录日志量大,但由于其是顺序写入虽然量大但对磁盘IO影响不太大
		mysql> show variables like '%image%';-- ROW格式的记录方式,FULL:即使更新一列也把其它没更新的记下 MINIMAL:只记录修改的 noblob:
		+------------------+-------+
		| Variable_name    | Value |
		+------------------+-------+
		| binlog_row_image | FULL  |
		+------------------+-------+
		查看:命令行-mysqlbinlog mysql-bin.000004(这种看不懂)	mysqlbinlog -vv mysql-bin.000004 | more (可读懂)
	3.混合日志格式 binlog_format=MIXED ,基于前两者,可以根据SQL语句由系统决定在基于段和行的日志格式中进行选择,数据量大小由所执行的SQL语句决定
	4.建议使用ROW MINIMAL格式日志

MySQL二进制格式对复制的影响:
	基本SQL语句复制(SBR):
		二进制日志格式使用的是statement格式,5.1.4前只存在这种复制格式,又叫逻辑复制,
		优点:生成日志量少,节约网络传输IO,并不强制要求主从数据库的表结构完全相同(应用:对大表的修改,可以先在从库上修改,然后切到从库,
		     从而减少对大表修改造成的停机时间)
	基于行的复制(RBR):二进制日志格式使用的是row格式:缺失
	混合模式:根据实际内容在以上两者间切换:缺失

MySQL复制工作方式:
	1.主库将变更写入二进制日志,所以要使用复制功能必须要先开启二进制日志
	2.从库从指定的位置读取主库的二进制日志,并把读到的二进制日志保存到从服务器本地的中继日志relay_log中,这个传输过程需要在从库启动一个工作线程,
	  这个线程会与主库建立一个链接,用二进制转储线程binlog dump,从而读取(主库通知,从库才去读)
	3.在从库读中继日志中的事件,并在从库上对这些事件进行重放,由从服务器上的线程完成

配置MySQL复制:
	1.开启主库binary log: 
		MAC OS: vim /etc/my.cnf(如果没有新建一个)
		CentOS: vim /etc/my.cnf.d/server.cnf
		在[mysqld]下添加
			log-bin=mysql-bin	#日志名字,意思好像是说有了名字就开启了binary log
			server-id=100	  	#5.7后开启binlog必须加此配置,配置主从时server-id必须不相同
		重启数据库服务:/etc/init.d/mysql restart
	2.开启从库relay log:
		在[mysqld]下添加
			relay-log=mysql_relay_log    #中继日志名字
			server-id=200		     #不能可主库相同
			#是否把中继日志存放到从服务器本机的二进制日志中,若做链路复制(把这个从服务器当做其它服务器的主服务器)时得配置
			log-slave-update=on [可选]    
			read-only=on [可选]          #一个安全配置参数,对于非super权限的对此库只有读权限
		重启数据库服务:/etc/init.d/mysql restart
	3.初始化从服务器数据:
		1.mysqldump --master-data=2 -single-transaction #对innodb表保证事务一致性
			mysql自带备份工具
			逻辑备份,会把库中所有的表倒成对象,此命令会锁表
		2.xtrabackup --slave-info
			三方提供的备份工具
			对innodb不阻塞, master-data 和 slave-info是用来记录主库二进制日志的信息和便宜量
	4.启动复制链路:假定主库-192.168.3.100  从库-192.168.3.101
		1.创建用户与授权:在主库上操作
			#在主库上创建一个用户repl 密码123456,可以在192.168.3.%这个网段上登陆
			#目的像是给连接主库与从库创建了一个专用的用户(最终完成复制操作后此用户虽然是在主库上创建的,但可以登陆从库)
			create user replp@'192.168.3.%' identified by '123456'; 
			#给在可以在192.168.3.%这个网段登陆的repl用户赋予replication slave权限到所以库的表
			grant replication slave on *.* to reply@'192.168.3.%';(可以直接在此处加identified by '123456';的话就不会先创建用户了)
		2.配置主和从上的配置文件
			见上第2步
		3.初始化从库数据:
			先在主库上用命令备份:
				mysqldump -uroot -proot --single-transaction --master-data --triggers --routines --all-databases >> all.sql
			把从主库备份好的文件复制到从库服务器上: 
				scp all.sql root@192.168.3.101:/root
			在从库上使用命令导入数据: 
				mysql -uroot -p < all.sql
		4.在从库上做数据配置:
			#指定此从库的主库(master_log_file和master_log_pos可以在备份的all.sql文件中找到)
			change master to master_host='192.168.3.100',master_user='reply',master_password='123456',
			master_log_file='mysql-bin.000005',master_log_pos='320372'; # 日志名和偏移量
		5.启动链路:
			show slave status\G 	#查看链路状态
			start slave; 		#启动链路
			其它关于slave的命令:
				stop slave;
				reset slvae;
	5.基于日志点的复制配置优、缺:
		优点:是MySQL最早支持的复制技术,bug相对较少
		     对SQL查询没有任何限制
		     故障处理比较容易
		缺点:
		     故障转移时重新获取新主的日志点信息比较困难
