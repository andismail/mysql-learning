数据库结构设计:
	1.良好的数据逻辑设计和物理设计是数据库获得高性能的基础
	2.设计数据库是不能只考虑当前的业务需要,还要考虑可能会编写什么样的查询语句,所以可能要根据查询语句来设计数据库结构
	3.数据库结构设计应当使查询语句尽量简单

数据库结构优化目的:
	1.减少冗余
	2.尽量避免数据维护中出现更新、插入和删除异常
	3.节约数据库存储空间
	4.提高查询效率

数据库设计步骤:
	1.需求分析-全面了解产品设计的存储需求:存储需求、数据处理需求、数据的安全性和完整性、数据的生命周期
	2.逻辑设计-设计数据的逻辑存储结构:搞清楚数据实体之间的逻辑关系、解决数据冗余和数据维护异常
	3.物理设计-根据所使用的数据库特点进行表结构设计
	4.维护优化-根据实际情况对索引、存储结构等进行优化

数据库设计范式:设计出没有数据冗余和数据维护异常的数据库结构
	1.第一范式
		1.数据库表中的所有字段都只具有单一属性
		2.单一属性的列是由基本数据类型所构成的
		3.设计出的表都是简单的二维表
	2.第二范式
		要求一个表中只具有一个主键,也就是说符合第二范式的表中不能存在非主键列只对部分主键的依赖关系
	3.第三范式
		指每一个非主属性既不部分依赖于也不传递依赖于业务主键,也就是在第二范式的基础上消除了非主属性对主键的传递依赖
	符合范式化设计的表结构有时并不能得到良好的SQL查询性能

反范式化设计:
	反范式化是针对范式化而言的,是为了性能和读取效率的考虑而适当的对数据库设计范式的要求进行违反,允许少量的数据冗余,也
	就是所谓的‘用空间来换取时间’

范式化优缺点:
	优点:
		可以尽量的减少数据冗余,从而数据表更新快体积小
		范式化的更新操作比反范式化更快
		范式化的表通常比反范式化的更小
	缺点:
		对于查询需要对多个表进行关联
		更难进行索引优化(因为联表)

-------------------------

物理设计:对逻辑模型进行存储结构设计
	1.定义数据库、表及字段的命名规范
	2.选择合适的存储引擎
	3.为表中的字段选择合适的数据类型
	4.建立数据库中表的结构

数据库、表及字段的全名规范:
	可读性、表意性和长名原则

数据类型:对IO有影响
	原则:当一个列可以选择多种数据类型时,应该优先考虑数字类型,其次是日期或二进制类型,最后是字符类型。
	     对于相同级别的数据类型,应该优先选择占用空间小的数据类型。
	原因:同样的数据,字符串处理往往要比数字类型要慢,数据处理是以页为单位,每页16K,列长越小每页的行数越多,
	     所以同样的数据加载页数小的肯定要比页数多的好,也就减少了磁盘IO有利于性能提升

整数类型:
	tinyint		1字节		-128~127			0~255		人
	smallint	2字节		-32768~32767			0~65535		龟
	mediumint	3字节		-8388608~8388607		0~16777215
	int		4字节		-2147483648~2147483647		0~约42.9亿	恐龙化石
	bigint		8字节		-9223372036854775808~...7	0~约10的19次方	太阳
浮点类型:
	float		4字节				计算不精确
	double		8字节				计算不精确
	decimal		每9位数占4字节,小数点占一位  	计算精确 	decimal(M,D) M:总位数, D:小数点后位数
	ERROR 1427 (42000): For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'c3').
VARCHAR和CHAR
	VARCHAR:用于存储变长字符串,只占用必要的存储空间,例如VARCHAR(2)可以存两个字符注意是字符如'中国','Hi',存多了会报Data too long,
		存少了例如存了'中',那就只占用'中'这么多空间,如果括号中的数小于255则占用一个额外的字节用于记录字符串长度,大于255时占两个
	VARCHAR长度选择:使用最小符合需求的长度,修改列的宽度会锁表,varchar(5)和varchar(200)存储'MySQL'字符串性能不同,原因是其为了能更有
		效的优化查询所以在内存中对字符串使用的是固定的宽度
	VARCHAR使用场景:
		字符串列的最大长度比平均长度大很多,这样可以发挥出其变长的特点
		字符串很少被更新的列,因为其变长可能会造成页的分裂,产生很多的存储碎片
	CHAR:定长,字符串存储在CHAR类型的列中会删除末尾的空格(VARCHAR中不会),最大宽度是255
	CHAR使用场景:
		长度近似的值,例如用户密码MD5加密后的值,手机号,身份证号
		短字符串,因为比VARCHAR省空间,例如性别char(1)比varchar(1)省1字节
		适合存储经常更新的字符串列,因为char长度是固定的,MySQL会一次性分配足够的存储空间,所以在多次更新的时候也不会出现页分裂的
		情况,同时也就不会产生存储碎片,从而获得更好的IO性能
日期类型:
	DATETIME:默认是YYYY-MM-DD HH:MM:SS,DATETIME(6)是带微秒的,与时区无关,占用8个字节,1000-01-01 00:00:00到9999-12-31 23:59:59
	TIMESTAMP:显示上和DATETIME一样,1970年1月1日到当前时间的秒数,显示依赖于所指定的时区,占用4个字节,1970-01-01到2038-01-19
		  表中可以指定一个数据被修改时自动更新的timestamp列,如果不指定默认是第一个timestamp类型的列
		  设置时区:set time_zone='+10:00';-- 第10时区
	5.6后新加的两种数据类型:
		data:例如用户的生日,3个字节,比datetime,int,字符串要少,1000-01-01~9999-12-31
		time:存储时间部分,HH:MM:SS,可以通过指定长度显示微秒
	注意事项:
		不要使用字符串类型存储日期时间数据
		使用Int存储日期时间不如使用timestamp类型

Innodb中非主键索引都会附加主键的信息所以主键应该尽可能的小
	主键应该是顺序增长,增加数据的插入效率
	业务主键可以和Innodb主键不同
